#!/usr/bin/env python3
from github import Github
import os
import pygit2
import join_git_repos
import re
import shutil

# Note, if you see error 403 rate limit errors, you probably need to authenticate
g = Github(os.environ.get("GH_TOKEN", None))

try:
    os.mkdir("repos")
except FileExistsError:
    pass


class MyRemoteCallbacks(pygit2.RemoteCallbacks):
    def transfer_progress(self, stats):
        print(f"{stats.indexed_objects}/{stats.total_objects}")


ignorelist = [
    "linux",
    "u-boot",
    "qemu",
    "openbmc.github.io",
    "tof-election",
]
repolist = []

tags = set()
for repo in g.get_organization("openbmc").get_repos():
    if repo.name in ignorelist:
        continue
    if repo.archived:
        continue
    if repo.name.startswith("meta-"):
        continue
    repodir = os.path.join("repos", repo.name)
    if not os.path.exists(repodir):
        pygit2.clone_repository(
            repo.clone_url, repodir, callbacks=MyRemoteCallbacks()
        )
    repo_object = pygit2.Repository(repodir)
    print(repo.name)
    if repo.name != "openbmc":
        repolist.append(repodir + "," + repo.name)

    # for all repos but the root, the tagged versions would now conflict so rename them to reponame-<old version>
    if repo.name != "openbmc":
        tag_regex = re.compile("^refs/tags/")
        for tag in repo_object.references:
            if not tag_regex.match(tag):
                continue
            commit = repo_object.lookup_reference(tag)
            if tag.startswith("refs/tags/" + repo.name):
                # tag names already changed
                continue
            new_tag_name = tag[:10] + repo.name + "_" + tag[10:]
            repo_object.references.create(new_tag_name, commit.name)
            repo_object.references.delete(tag)

join_git_repos.main("repos/openbmc,/", repolist, "output")

for root, dirs, files in os.walk("output"):
    # no need to walk non-meta directories
    if root == "output":
        dirs[:] = [d for d in dirs if d.startswith("meta-")]
    for filename in files:
        if not filename.endswith(".bb") and not filename.endswith(".inc"):
            continue
        filepath = os.path.join(root, filename)
        with open(filepath, "r") as bb:
            bb_contents = bb.readlines()

        linesout = []
        pn = filename.split("_")[0]
        src_rev_line_number = None
        recipe_name = None
        for line_number, line in enumerate(bb_contents):
            match = re.match(
                '^SRC_URI \+?= "git://github.com/openbmc/([\w\-_]+)(.git)?;.*',
                line,
            )
            if match:
                print("Found BB file to modify {}".format(filename))
                src_rev_line_number = line_number
                recipe_name = match.group(1)

        if src_rev_line_number:
            bb_contents.append("\ninherit externalsrc\n")
            bb_contents.append(
                'EXTERNALSRC:pn-{} = "${{TOPDIR}}/../{}"\n'.format(
                    pn, recipe_name
                )
            )

        with open(filepath, "w") as bb:
            bb.write("".join(bb_contents))
