#!/usr/bin/env python3
from github import Github
import os
import pygit2
import join_git_repos
import re
import shutil

# Note, if you see error 403 rate limit errors, you probably need to authenticate
g = Github(os.environ.get("GH_TOKEN", None))

try:
    os.mkdir("repos")
except FileExistsError:
    pass


class MyRemoteCallbacks(pygit2.RemoteCallbacks):
    def transfer_progress(self, stats):
        print(f"{stats.indexed_objects}/{stats.total_objects}")


# enabling this does the naive version, simply copying all the sources into the root so it can be compared
build_simple_tree_test = False

ignorelist = [
    "linux",
    "u-boot",
    "qemu",
    "openbmc.github.io",
    "tof-election",
    "openbmc",
]
repolist = []

# clean up any old trees
if build_simple_tree_test:
    if os.path.exists("output_simple"):
        shutil.rmtree("output_simple", onerror=None)
    shutil.copytree("repos/openbmc", "output_simple", symlinks=False)

tags = set()
for repo in g.get_organization("openbmc").get_repos():
    if repo.name in ignorelist:
        continue
    if repo.archived:
        continue
    if repo.name.startswith("meta-"):
        continue
    repodir = os.path.join("repos", repo.name)
    if not os.path.exists(repodir):
        pygit2.clone_repository(
            repo.clone_url, repodir, callbacks=MyRemoteCallbacks()
        )
    repo_object = pygit2.Repository(repodir)
    print(repo.name)
    repolist.append(repodir + "," + repo.name)

    # for all repos but the root, the tagged versions would now conflict so rename them to reponame-<old version>
    if repo.name != "openbmc":
        if build_simple_tree_test:
            shutil.copytree(
                repodir,
                os.path.join("output_simple", repo.name),
                symlinks=False,
            )
            shutil.rmtree(os.path.join("output_simple", repo.name, ".git"))

        tag_regex = re.compile("^refs/tags/")
        for tag in repo_object.references:
            if not tag_regex.match(tag):
                continue
            commit = repo_object.lookup_reference(tag)
            if tag.startswith("refs/tags/" + repo.name):
                # tag names already changed
                continue
            new_tag_name = tag[:10] + repo.name + "_" + tag[10:]
            repo_object.references.create(new_tag_name, commit.name)
            repo_object.references.delete(tag)

no_subdirs = False
join_git_repos.main("repos/openbmc,/", repolist, "output")
